h1. Managing Passwords, Forget Them

As a system administrator, I have tried many different methods of remembering 
passwords for several dozen servers worth of root account passwords, MySQL passwords, 
and user account passwords. Using premutations of word-based passwords, or easily 
remembered passwords, is insecure and prone to even basic brute forcing. Using a strong, 
common password is a horrible idea, because that password could be innocently leaked in 
a number of ways.

The most secure passwords, in these cases, are long strings of randomized characters, 
numbers, and symbols, generated for each server, service, and user. Obviously these 
passwords accumulate quickly and the two problems with generating these types of 
passwords is either they require significant meatspace memory to use easily, or they 
end up pasted in a (let's hope) well encrypted file or database. The encrypted database 
could obviously become an attack target, especially if these files need to be shared 
across desktop systems, where you can't guarantee everyone is using the encrypted files
in a sane way. Remembering passwords obviously doesn't scale well with a team of admins 
and developers, not to mention it is difficult to commit to memory in the first place -- 
although I still surprise myself with how many passwords I still remember on muscle memory alone.

This likely sounds paranoid, verging on conspiracy theory. A sysadmin doesn't get paid to
work with best-case scenarios though.

To make use of a strong, generated password, without having to know or remember 
the actual password, a reliable method to regenerate the password is needed. After
several different versions of the same script, here is a script close to what I use,
for my personal passwords at least:

<script src="http://bitbucket.org/agj/misc/src/dbbd6d4b95ee/passgen.py?embed=t"></script>

"Source":http://bitbucket.org/agj/misc/src/tip/passgen.py

In this version, I rely on the base64 output of a bcrypt salted passphrase to give me an 
alpha-numeric password. Because the character set of base64 encoded data only contains 
several symbols, I would like to find a better method of encoding the bcrypt hashed data.
There are some weak points to generating a password this way, but we are just *generating* 
a password, not storing a password. What we have accomplished, however:


* If a server or service is compromised, passwords on other servers will not be 
  compromised as long as different passwords are used across servers and accounts.
* Reverse-engineering the password to gain the original passphrase would be resource 
  expensive, if at all possible in the near future. Not only is the generated 
  password only a chunk of the full hash, the bcrypt salt prevents rainbow table 
  style attacks, and the nature of bcrypt helps defend against brute force style 
  attacks in a future-scalable method.
* There is no common database or shared architecture to exploit to gain access to 
  password lists.
* The poor practices of common passwords or weak passwords are negated.

If using a similar script to this, how the script is used must remain secure, 
obviously. The salt can be public, it doesn't need to remain private, it is meant
to defend against rainbow table style attacks and creating separate hashes for two
similar passwords. The passphrases should be strong, I do find including a reference
to the server an easy method, however it is bit more insecure.

